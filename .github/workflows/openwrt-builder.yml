#
# openwrt-builder.yml
# Description: GitHub Actions workflow to build OpenWrt firmware automatically.
#

name: OpenWrt Builder

on: workflow_dispatch

permissions:
  contents: write

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 4096
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Checkout
      uses: actions/checkout@v4

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo apt-get -qq autoremove --purge
        sudo apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo chown $USER:$(id -gn) $GITHUB_WORKSPACE

    - name: Clone source code
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Load custom feeds
      run: |
        if [ -e $FEEDS_CONF ]; then mv $FEEDS_CONF openwrt/feeds.conf.default; fi
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update & Install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        if [ -e files ]; then mv files openwrt/files; fi
        if [ -e $CONFIG_FILE ]; then mv $CONFIG_FILE openwrt/.config; fi
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc) || make download -j1
        find dl -size -1024c -delete

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')
        [ -n "$DEVICE_NAME" ] && DEVICE_NAME="_$DEVICE_NAME" || DEVICE_NAME=""
        echo "device_name=$DEVICE_NAME" >> $GITHUB_OUTPUT
        echo "file_date=_$(date +"%Y%m%d%H%M")" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Check space usage
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@v4
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ steps.compile.outputs.device_name }}${{ steps.compile.outputs.file_date }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "firmware_path=$PWD" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success'
      with:
        name: OpenWrt_firmware${{ steps.compile.outputs.device_name }}${{ steps.compile.outputs.file_date }}
        path: ${{ steps.organize.outputs.firmware_path }}/*

    - name: Generate release tag
      id: tag
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        manifest_file=$(ls ${{ steps.organize.outputs.firmware_path }}/*.manifest | head -n 1)
        pkg_count=$(wc -l < "$manifest_file")
        {
          echo "**Total packages: $pkg_count**"
          echo
          echo "<details><summary>ðŸ“¦ OpenWrt Manifest</summary>"
          echo
          echo '| Package | Version |'
          echo '|---------|---------|'
          awk '{printf "| %s | %s |\n", $1, $3 ? $3 : $2}' "$manifest_file"
          echo "</details>"
        } > release_body.md
        echo "body_path=release_body.md" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: ${{ steps.tag.outputs.body_path }}
        files: ${{ steps.organize.outputs.firmware_path }}/*
